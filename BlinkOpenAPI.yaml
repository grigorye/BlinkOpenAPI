openapi: 3.0.0
info:
  title: Unofficial Blink Camera API
  version: "0.1.0"
servers:
  - url: https://rest-prod.immedia-semi.com
paths:
  '/network/{networkID}/camera/{cameraID}/enable':
    post:
      operationId: enableCamera
      parameters:
        - name: networkID
          in: path
          required: true
          schema: { type: integer }
        - name: cameraID
          in: path
          required: true
          schema: { type: integer }
      responses:
        '200':
          description: Enable Camera Response
          content:
            'application/json':
              schema: { $ref: '#/components/schemas/InitialCommandResponse' }
  '/network/{networkID}/camera/{cameraID}/disable':
    post:
      operationId: disableCamera
      parameters:
        - name: networkID
          in: path
          required: true
          schema: { type: integer }
        - name: cameraID
          in: path
          required: true
          schema: { type: integer }
      responses:
        '200':
          description: Disable Camera Response
          content:
            'application/json':
              schema: { $ref: '#/components/schemas/InitialCommandResponse' }
  '/{media}.jpg':
    get:
      operationId: getThumbnail
      parameters:
        - name: media
          in: path
          description: Media URL
          required: true
          schema: { type: string }
      responses:
        '200':
          description: Thumbnail
          content:
            'image/jpeg':
              schema: { type: string, format: binary }
  '/{media}':
    get:
      operationId: getVideo
      parameters:
        - name: media
          in: path
          description: Media URL
          required: true
          schema: { type: string }
      responses:
        '200':
          description: Media
          content:
            'application/mp4':
              schema: { type: string, format: binary }
  
  '/api/v5/account/login':
    post:
      operationId: login
      requestBody:
        required: true
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/LoginRequest'
      
      responses:
        '200':
          description: Login response
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/LoginResponse'

  '/api/v4/account/{accountID}/client/{clientID}/pin/verify':
    post:
      operationId: verifyPin
      parameters:
        - name: accountID
          in: path
          description: Account ID
          required: true
          schema: { type: integer }
        - name: clientID
          in: path
          description: Client ID
          required: true
          schema: { type: integer }
      requestBody:
        required: true
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/VerifyPinRequest'
      responses:
        '200':
          description: Verify Pin Response
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/VerifyPinResponse'
        default:
          $ref: '#/components/schemas/ErrorResponse'
  '/api/v3/accounts/{accountID}/homescreen':
    get:
      parameters:
        - name: accountID
          in: path
          description: Account ID
          required: true
          schema: { type: integer }
      operationId: homescreen
      responses:
        '200':
          description: Home Screen
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/HomeScreenResponse'
  '/api/v1/accounts/{accountID}/media/changed':
    get:
      operationId: getVideoEvents
      parameters:
        - name: accountID
          in: path
          description: Account ID
          required: true
          schema: { type: integer }
        - name: since
          in: query
          required: true
          schema: { type: string, format: date-time }
        - name: page
          description: Page number for multiple pages of results
          in: query
          required: true
          schema: { type: integer }
      responses:
        '200':
          description: Video events
          content:
            'application/json':
              schema: { $ref: '#/components/schemas/VideoEvents' }
        default:
          $ref: '#/components/responses/ErrorResponse'
components:
  responses:
    'ErrorResponse':
      description: Error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
  schemas:
    'Error':
      type: object
      required: [message, code]
      properties:
        message: { type: string }
        code: { type: integer }
    'LoginRequest':
      type: object
      required: [password, email]
      properties:
        unique_id: { type: string }
        password: { type: string }
        email: { type: string }
        client_name: { type: string }
        app_version: { type: string }
        reauth: { type: boolean }
        device_identifier: { type: string }
    'LoginResponse':
      type: object
      required: [account, auth, phone, verification, lockout_time_remaining, force_password_reset, allow_pin_resend_seconds]
      properties:
        account:
          type: object
          properties:
            account_id: { type: integer }
            user_id: { type: integer }
            client_id: { type: integer }
            new_account: { type: boolean }
            tier: { type: string } # "e003"
            region: { type: string } # "eu"
            account_verification_required: { type: boolean }
            client_verification_required: { type: boolean }
            phone_verification_required: { type: boolean }
            verification_channel: { type: string } # "email"
          required: [account_id, user_id, client_id, new_account, tier, region, account_verification_required, client_verification_required, phone_verification_required, verification_channel]
        auth:
          type: object
          properties:
            token: { type: string }
          required: [token]
        phone:
          type: object
          properties:
            number: { type: string } # "+"
            last_4_digits: { type: string }
            country_calling_code: { type: string }
            valid: { type: boolean }
          required: [number, last_4_digits, country_calling_code, valid]
        verification:
          type: object
          properties:
            email:
              type: object
              properties:
                required: { type: boolean }
              required: [required]
            phone:
              type: object
              properties:
                required: { type: boolean }
                channel: { type: string } # "sms"
              required: [required, channel]
          required: [email, phone]
        lockout_time_remaining: { type: integer }
        force_password_reset: { type: boolean }
        allow_pin_resend_seconds: { type: integer }
    'VerifyPinRequest':
      type: object
      properties:
        pin: { type: string } # "123456"
      required: [pin]
    'VerifyPinResponse':
      type: object
      required: [valid, require_new_pin, message, code]
      properties:
        valid: { type: boolean } # true
        require_new_pin: { type: boolean } # false
        message: { type: string } # "Client has been successfully verified"
        code: { type: integer } # 1234
    'HomeScreenResponse':
      type: object
      required: [account, networks, sync_modules, cameras]
      properties:
        account:
          type: object
          required: [id, email_verified, email_verification_required]
          properties:
            id: { type: integer } # 1234
            email_verified: { type: boolean } # true
            email_verification_required: { type: boolean } # false
        networks:
          type: array
          items: { $ref: '#/components/schemas/Network' }
        sync_modules:
          type: array
          items: { $ref: '#/components/schemes/SyncModule' }
        cameras:
          type: array
          items:
            $ref: '#/components/schemas/Camera'
    'SyncModule':
      type: object
      required: [id, created_at, updated_at, name, onboarded, status, serial, fw_version, last_hb, wifi_strength, network_id, enable_temp_alerts, local_storage_enabled, local_storage_compatible, local_storage_status]
      properties:
        id: { type: integer } # 4539
        created_at: { type: string, format: date-time } # "2020-09-14T16:41:38+00:00"
        updated_at: { type: string, format: date-time } # "2020-09-14T16:41:38+00:00"
        last_hb: { type: string, format: date-time } # "2020-09-14T16:41:38+00:00"
        name: { type: string } # Front Door"
        onboarded: { type: boolean }
        enable_temp_alerts: { type: boolean }
        status: { type: string, enum: ["online", "offline"] }
        serial: { type: string }
        fw_version: { type: string }
        wifi_strength: { type: integer }
        network_id: { type: integer }
        local_storage_enabled: { type: boolean }
        local_storage_compatible: { type: boolean }
        local_storage_status: { type: string } # "unavailable"
    'Network':
      type: object
      required: [id, created_at, updated_at, name, time_zone, dst, armed, lv_save]
      properties:
        id: { type: integer } # 4539
        created_at: { type: string, format: date-time } # "2020-09-14T16:41:38+00:00"
        updated_at: { type: string, format: date-time } # "2020-09-14T16:41:38+00:00"
        name: { type: string } # Front Door"
        time_zone: { type: string } # "America/Chicago"
        dst: { type: boolean }
        armed: { type: boolean }
        lv_save: { type: boolean }
    'Camera':
      type: object
      required: [id, created_at, updated_at, name, serial, fw_version, type, enabled, thumbnail, status, battery, usage_rate, network_id, signals, local_storage_enabled, local_storage_compatible, issues]
      properties:
        id: { type: integer } # 4539
        created_at: { type: string, format: date-time } # "2020-09-14T16:41:38+00:00"
        updated_at: { type: string, format: date-time } # "2020-09-14T16:41:38+00:00"
        name: { type: string } # Front Door"
        serial: { type: string } # "861575233"
        fw_version: { type: string } # "7.96"
        type: { type: string } # "xt2"
        enabled: { type: boolean } # true
        thumbnail: { type: string } # "/media/e003/account/506/network/3801/camera/4539/thumbnail/fw_7.96__mJKyh0mA_2020_09_20__16_45PM"
        status: { type: string, enum: ["done", "offline"] } # "done"
        battery: { type: string, enum: ["ok", "low"] } # "ok"
        usage_rate: { type: boolean } # true
        network_id: { type: integer } # 3801
        issues: { type: array, items: { $ref: '#/components/schemas/Issue' } }
        signals:
          type: object
          required: [lfr, wifi, temp, battery]
          properties:
            lfr: { type: integer } # 3
            wifi: { type: integer } # 5
            temp: { type: integer } # 51
            battery: { type: integer } # 3
        local_storage_enabled: { type: boolean } # false
        local_storage_compatible: { type: boolean } # false
    'VideoEvents':
      type: object
      required: [limit, purge_id, refresh_count, media]
      properties:
        limit: { type: integer } # 25
        purge_id: { type: integer } # 1234567890
        refresh_count: { type: integer } # 0
        media:
          type: array
          items:
            $ref: '#/components/schemas/Media'
    'Media':
      type: object
      required: [id, created_at, updated_at, deleted, device, device_id, device_name, network_id, network_name, type, source, watched, partial, thumbnail, media, additional_devices, time_zone]
      properties:
        id: { type: integer } # 1234567890
        created_at: { type: string, format: date-time } # "2020-09-14T16:41:38+00:00"
        updated_at: { type: string, format: date-time } # "2020-09-14T16:41:38+00:00"
        deleted: { type: boolean } # false
        device: { type: string, enum: ["camera", "owl"] } # "camera"
        device_id: { type: integer } # 1234567
        device_name: { type: string } # "The Device Name"
        network_id: { type: integer } # 1234
        network_name: { type: string } # "The Netork Name"
        type: { type: string, enum: ["video"] } # "video"
        source: { type: string, enum: ["liveview", "pir"] } # "pir"
        watched: { type: boolean } # true
        partial: { type: boolean, nullable: true } # false
        thumbnail: { type: string } # "/api/v2/accounts/1234/media/thumb/mediathumbnailname"
        media: { type: string } # "/api/v2/accounts/1234/media/clip/mediavideoname.mp4"
        time_zone: { type: string } # "America/Chicago"
    'InitialCommandResponse':
      type: object
      required: [id]
      properties:
        id: { type: integer } # 1833710
    'Issue':
      type: object
      properties:
        __unknown: { type: integer }
  
